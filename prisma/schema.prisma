datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  PLATFORM_ADMIN
  SHOP_ADMIN
  EMPLOYEE
}

enum AdminPermission {
  ALL
  UPLOAD_MUSIC
  VIEW_TRANSACTIONS
}

enum PlaylistType {
  PUBLIC
  PRIVATE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id                           String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                         String?
  email                        String                 @unique
  emailVerified                DateTime?
  phoneNumber                  String?
  otherPhone                   String?
  image                        String?
  password                     String?
  commercialRegistrationNumber String?
  website                      String?
  role                         UserRole               @default(SHOP_ADMIN)
  permissions                  AdminPermission[]      @default([ALL])
  accounts                     Account[]
  sessions                     Session[]
  coffeeShops                  CoffeeShop[]           @relation("UserCoffeeShops") // For the admin relation
  employedAt                   CoffeeShopOnEmployee[] // Relation to join table for employees

  // Optional for WebAuthn support
  authenticators Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Artist {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String
  coffeeShops    CoffeeShop[] @relation(fields: [coffeeShopsIds], references: [id])
  coffeeShopsIds String[]     @default([]) @db.ObjectId
  Album          Album[]
  Song           Song[]
}

model Album {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  year           Int?
  image          String
  artist         Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId       String       @db.ObjectId
  Song           Song[]
  coffeeShops    CoffeeShop[] @relation(fields: [coffeeShopsIds], references: [id])
  coffeeShopsIds String[]     @default([]) @db.ObjectId
}

model Song {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  artist          Artist?          @relation(fields: [artistId], references: [id], onDelete: Cascade)
  album           Album?           @relation(fields: [albumId], references: [id], onDelete: Cascade)
  duration        Float
  fileURL         String
  thumbnail       String
  artistId        String?          @db.ObjectId
  albumId         String?          @db.ObjectId
  QueueSong       QueueSong[]
  transactionsIds String[]         @default([]) @db.ObjectId
  SongCoffeeShop  SongCoffeeShop[]
  timesPurchased  Int              @default(0)
  genres          Genre[]          @relation(fields: [genresIds], references: [id])
  genresIds       String[]         @default([]) @db.ObjectId
  playlists       Playlist[]       @relation(fields: [playlistsIds], references: [id])
  playlistsIds    String[]         @default([]) @db.ObjectId
}

model CoffeeShop {
  id             String                 @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  logo           String?
  admin          User                   @relation("UserCoffeeShops", fields: [adminId], references: [id])
  workingHours   Json
  revenueShare   Int
  iban           String?
  accountNumber  String?
  bankName       String?
  country        String?
  city           String?
  district       String?
  phone          String?
  location       Json?
  playingQueue   QueueSong[]            @relation(name: "CoffeeShopQueueSongs")
  adminId        String                 @db.ObjectId
  Transactions   Transaction[]
  Artists        Artist[]               @relation(fields: [artistsIds], references: [id])
  artistsIds     String[]               @default([]) @db.ObjectId
  Albums         Album[]                @relation(fields: [albumsIds], references: [id])
  albumsIds      String[]               @default([]) @db.ObjectId
  songPrice      Float                  @default(1)
  SongCoffeeShop SongCoffeeShop[]
  Playlist       Playlist[]
  Employees      CoffeeShopOnEmployee[] // Relation to join table for employees
}

model CoffeeShopOnEmployee {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  coffeeShop   CoffeeShop @relation(fields: [coffeeShopId], references: [id])
  coffeeShopId String     @db.ObjectId

  createdAt DateTime @default(now())
}

model Genre {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String
  songs    Song[]   @relation(fields: [songsIds], references: [id])
  songsIds String[] @default([]) @db.ObjectId
}

model Playlist {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  type     PlaylistType @default(PUBLIC)
  name     String
  songs    Song[]       @relation(fields: [songsIds], references: [id])
  songsIds String[]     @default([]) @db.ObjectId
  shop     CoffeeShop?  @relation(fields: [shopId], references: [id])
  shopId   String?      @db.ObjectId
}

model SongCoffeeShop {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  price        Float
  song         Song       @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId       String     @db.ObjectId
  coffeeShopId String     @db.ObjectId
  CoffeeShop   CoffeeShop @relation(fields: [coffeeShopId], references: [id])

  @@unique([songId, coffeeShopId]) // Ensure a unique combination of song and coffee shop
}

model QueueSong {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  song          Song         @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId        String       @db.ObjectId
  CoffeeShop    CoffeeShop?  @relation(name: "CoffeeShopQueueSongs", fields: [coffeeShopId], references: [id])
  coffeeShopId  String?      @db.ObjectId
  transactionId String?      @db.ObjectId
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  status      TransactionStatus
  amount      Float
  shop        CoffeeShop        @relation(fields: [shopId], references: [id])
  shopId      String            @db.ObjectId
  songs       Json[]
  tableNumber Int
  createdAt   DateTime          @default(now())
  QueueSong   QueueSong[]
}
